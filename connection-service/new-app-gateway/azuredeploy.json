{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "subnetRef": {
      "type": "string",
      "metadata": {
        "description": "Subnet resource reference in the form of (vnet resourceId/subnets/(subnetname))"
      }
    },
    "skuName": {
      "type": "string",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large"
      ],
      "defaultValue": "Standard_Medium",
      "metadata": {
        "description": "Sku Name"
      }
    },
    "capacity": {
      "type": "int",
      "minValue": 1,
      "maxValue": 10,
      "defaultValue": 2,
      "metadata": {
        "description": "Number of instances"
      }
    },
    "pathMatch1": {
      "type": "string",
      "metadata": {
        "description": "Path match string for Path Rule 1"
      }
    },
    "certData": {
      "type": "string",
      "metadata": {
        "description": "Base-64 encoded form of the .pfx file"
      }
    },
    "certPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for .pfx certificate"
      }
    },
    "SGBackendPoolName": {
      "type": "string",
      "metadata": {
        "description": "Security Gateway backend pool name"
      }
    },
    "CSBackendPoolName": {
      "type": "string",
      "metadata": {
        "description": "Connection Service backend pool name"
      }
    },
    "applicationGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway Name including the unique CS suffix"
      }
    },
    "enableExternalAccess": {
      "type": "bool",
      "metadata": {
          "description": "'true' if a Public IP address should be created, otherwise 'false'."
      }
    },
    "disableExternalUserInterface": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "If true, disables external access to the management interface."
      }
    },
    "CSUniqueSuffix": {
      "type": "string",
      "metadata": {
          "description": "Suffix to add to connection service resources to ensure uniqueness."
      }
    }
  },
  "variables": {
    "publicIPAddressName": "[concat('appGatewayPublicIP',parameters('CSUniqueSuffix'))]",
    "publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "applicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName'))]",
    "apiVersion": "2017-11-01",
    "appGwFrontendHttpsPort": 443,
    "appGwFrontendHttpPort": 80,
    "appGwFrontendSecondaryHttpsPort": 60443,
    "appGwBackendPort": 8080,
    "appGwBackendDirectBrokerPort": 8888,
    "internalExternalConfigurations": {
      "internal": {
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPrivateHttpPort",
            "properties": {
              "Port": "[variables('appGwFrontendHttpPort')]"
            }
          },
          {
            "name": "appGatewayFrontendPrivateHttpsPort",
            "properties": {
              "Port": "[variables('appGwFrontendHttpsPort')]"
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendPrivateIP",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetRef')]"
              }
            }
          }
        ],
        "httpListeners" : [
          {
            "name": "appGatewayPrivateHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPrivateHttpPort')]"
              },
              "Protocol": "Http"
            }
          },
          {
            "name": "appGatewayPrivateHttpsListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPrivateHttpsPort')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              }
            }
          }
        ],
        "redirectConfigurations": [
          {
            "Name": "redirectHttpConfig",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpsListener')]"
              }
            }
          }
        ]
      },
      "external": {
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPublicHttpPort",
            "properties": {
              "Port": "[variables('appGwFrontendHttpPort')]"
            }
          },
          {
            "name": "appGatewayFrontendPublicHttpsPort",
            "properties": {
              "Port": "[variables('appGwFrontendHttpsPort')]"
            }
          },
          {
            "name": "appGatewayFrontendPrivateHttpsPort",
            "properties": {
              "Port": "[variables('appGwFrontendSecondaryHttpsPort')]"
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendPublicIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('publicIPRef')]"
              }
            }
          },
          {
            "name": "appGatewayFrontendPrivateIP",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetRef')]"
              }
            }
          }
        ],
        "httpListeners" : [
          {
            "name": "appGatewayPublicHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendPublicIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPublicHttpPort')]"
              },
              "Protocol": "Http"
            }
          },
          {
            "name": "appGatewayPublicHttpsListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendPublicIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPublicHttpsPort')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              }
            }
          },
          {
            "name": "appGatewayPrivateHttpsListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendPrivateIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPrivateHttpsPort')]"
              },
              "Protocol": "Https",
              "SslCertificate": {
                "Id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewaySslCert')]"
              }
            }
          }
        ],
        "redirectConfigurations": [
          {
            "Name": "redirectHttpConfig",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPublicHttpsListener')]"
              }
            }
          }
        ]
      }
    },
    "configurationParameters": {
      "externalNoUI": {
        "frontendIPConfigurations": "[variables('internalExternalConfigurations')['external'].frontendIPConfigurations]",
        "frontendPorts": "[variables('internalExternalConfigurations')['external'].frontendPorts]",
        "httpListeners": "[variables('internalExternalConfigurations')['external'].httpListeners]",
        "redirectConfigurations": "[variables('internalExternalConfigurations')['external'].redirectConfigurations]",
        "requestRoutingRules":[
          {
            "Name": "httpRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPublicHttpListener')]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/redirectHttpConfig')]"
              }
            }
          },
          {
            "Name": "httpsRule",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPublicHttpsListener')]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/pcoipBrokerProtocolPath')]"
              }
            }
          },
          {
            "Name": "internalHttpsRule",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpsListener')]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/pcoipDirectBrokerProtocolPath')]"
              }
            }
          }
        ]
      },
      "externalWithUI": {
        "frontendIPConfigurations": "[variables('internalExternalConfigurations')['external'].frontendIPConfigurations]",
        "frontendPorts": "[variables('internalExternalConfigurations')['external'].frontendPorts]",
        "httpListeners": "[variables('internalExternalConfigurations')['external'].httpListeners]",
        "redirectConfigurations": "[variables('internalExternalConfigurations')['external'].redirectConfigurations]",
        "requestRoutingRules":[
          {
            "Name": "httpRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPublicHttpListener')]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/redirectHttpConfig')]"
              }
            }
          },
          {
            "Name": "httpsRule",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPublicHttpsListener')]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/pcoipBrokerProtocolUserInterfacePath')]"
              }
            }
          },
          {
            "Name": "internalHttpsRule",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpsListener')]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/pcoipDirectBrokerProtocolPath')]"
              }
            }
          }
        ]
      },
      "internalNoUI": {
        "frontendIPConfigurations": "[variables('internalExternalConfigurations')['internal'].frontendIPConfigurations]",
        "frontendPorts": "[variables('internalExternalConfigurations')['internal'].frontendPorts]",
        "httpListeners": "[variables('internalExternalConfigurations')['internal'].httpListeners]",
        "redirectConfigurations": "[variables('internalExternalConfigurations')['internal'].redirectConfigurations]",
        "requestRoutingRules":[
          {
            "Name": "httpRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpListener')]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/redirectHttpConfig')]"
              }
            }
          },
          {
            "Name": "httpsRule",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpsListener')]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/pcoipDirectBrokerProtocolPath')]"
              }
            }
          }
        ]
      },
      "internalWithUI": {
        "frontendIPConfigurations": "[variables('internalExternalConfigurations')['internal'].frontendIPConfigurations]",
        "frontendPorts": "[variables('internalExternalConfigurations')['internal'].frontendPorts]",
        "httpListeners": "[variables('internalExternalConfigurations')['internal'].httpListeners]",
        "redirectConfigurations": "[variables('internalExternalConfigurations')['internal'].redirectConfigurations]",
        "requestRoutingRules":[
          {
            "Name": "httpRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpListener')]"
              },
              "redirectConfiguration": {
                "id": "[concat(variables('applicationGatewayID'), '/redirectConfigurations/redirectHttpConfig')]"
              }
            }
          },
          {
            "Name": "httpsRule",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayPrivateHttpsListener')]"
              },
              "urlPathMap": {
                "id": "[concat(variables('applicationGatewayID'), '/urlPathMaps/pcoipDirectBrokerProtocolPath')]"
              }
            }
          }
        ]
      }
    },
    "pcoipPathRules": [
      {
        "name": "pcoipBrokerProtocolRule",
        "properties": {
          "paths": [
            "[parameters('pathMatch1')]"
          ],
          "backendAddressPool": {
            "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/', parameters('SGBackendPoolName') )]"
          },
          "backendHttpSettings": {
            "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
          }
        }
      }
    ],
    "pcoipDirectBrokerPathRules" : [
      {
        "name": "pcoipDirectBrokerProtocolRule",
        "properties": {
          "paths": [
            "[parameters('pathMatch1')]"
          ],
          "backendAddressPool": {
            "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/', parameters('CSBackendPoolName') )]"
          },
          "backendHttpSettings": {
            "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayDirectBrokerHttpSettings')]"
          }
        }
      }
    ],
    "configuration": "[if(parameters('enableExternalAccess'), if(parameters('disableExternalUserInterface'),'externalNoUI','externalWithUI'),if(parameters('disableExternalUserInterface'),'internalNoUI','internalWithUI'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "condition": "[parameters('enableExternalAccess')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[parameters('applicationGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('skuName')]",
          "tier": "Standard",
          "capacity": "[parameters('capacity')]"
        },
        "frontendIPConfigurations": "[variables('configurationParameters')[variables('configuration')].frontendIPConfigurations]",
        "frontendPorts":            "[variables('configurationParameters')[variables('configuration')].frontendPorts]",
        "httpListeners":            "[variables('configurationParameters')[variables('configuration')].httpListeners]",
        "requestRoutingRules":      "[variables('configurationParameters')[variables('configuration')].requestRoutingRules]",
        "redirectConfigurations":   "[variables('configurationParameters')[variables('configuration')].redirectConfigurations]",
        "sslCertificates": [
          {
            "name": "appGatewaySslCert",
            "properties": {
              "data": "[parameters('certData')]",
              "password": "[parameters('certPassword')]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetRef')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[parameters('CSBackendPoolName')]"
          },
          {
            "name": "[parameters('SGBackendPoolName')]"
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": "[variables('appGwBackendPort')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Enabled",
              "RequestTimeout": "90"
            }
          },
          {
            "name": "appGatewayDirectBrokerHttpSettings",
            "properties": {
              "Port": "[variables('appGwBackendDirectBrokerPort')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Enabled",
              "RequestTimeout": "90",
              "pickHostNameFromBackendAddress": true,
              "Probe": {
                "id": "[concat(variables('applicationGatewayID'), '/probes/broker-probe')]"
              }
            }
          }
        ],
        "urlPathMaps": [
          {
            "name": "pcoipBrokerProtocolUserInterfacePath",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/', parameters('CSBackendPoolName') )]"
              },
              "defaultBackendHttpSettings": {
                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              },
              "pathRules": "[variables('pcoipPathRules')]"
            }
          },
          {
            "name": "pcoipBrokerProtocolPath",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/', parameters('SGBackendPoolName') )]"
              },
              "defaultBackendHttpSettings": {
                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              },
              "pathRules": "[variables('pcoipPathRules')]"
            }
          },
          {
            "name": "pcoipDirectBrokerProtocolPath",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/', parameters('CSBackendPoolName') )]"
              },
              "defaultBackendHttpSettings": {
                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              },
              "pathRules": "[variables('pcoipDirectBrokerPathRules')]"
            }
          }
        ],
        "probes": [
          {
              "name": "broker-probe",
              "properties": {
                  "protocol": "Http",
                  "path": "/pcoip-broker/xml",
                  "interval": 30,
                  "timeout": 30,
                  "unhealthyThreshold": 3,
                  "pickHostNameFromBackendHttpSettings": true,
                  "minServers": 0,
                  "match": {
                      "body": "",
                      "statusCodes": [
                          "200-499"
                      ]
                  }
              },
              "type": "Microsoft.Network/applicationGateways/probes"
          }
        ]
      }
    }
  ]
}